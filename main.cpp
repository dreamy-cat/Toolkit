#include <QApplication>
// #include <QLocale>
// #include <QTranslator>

#include "Toolkit.hpp"

// #include "SimpleTCPClient.hpp"

// Обновить репозиторий полностью и реализовать исследовательскую модель по управлению UDP трафиком.
// Класс SimpleClient пока оставить или переделать отдельно серверную/клиентскую часть по классам.
// Вынести все вычислительные эксперименты в свой класс и наверное табами оставить просто в интерфейсе.
// Базовое приложение обновить на Qt6 пока что версии, компиляция по минимуму Win.
// UDP класс также отдельно, вывод по умолчанию в виртуальный лог и подумать над библиотекой графики.

// Общие комментарии и мысли для модели:
// - провести сравнительный анализ. Достижение поставленной цели, или в предприятие.
// - 3-ая задача тестирование и сравнение с аналогами и достижением цели(4), подумать над параметрами цели;
// - можно создавать прототип или базовая версия, требования быть аккуратней c целями;
// - подготовить теорию;
// - проблемная область в актуальности и её в первую часть, поменять местами;
// - привести примеры УДП траффика;
// - после недостатки алгоритмов или программ или применятеся плохо;
// - коллизии и удешвление и упрощение оборудования;
// - к приложению кто будет использовать;
// - конкретная задача;
// - показатели достижения цели;

// Теоретическая глава, состоит из 3 частей: 
// - описание проблемной области, как обстоят дела сейчас;
// - анализ методов и анализ инструментов и их текщих возможностей, не забыть таблицу и критирии выбора (экспертные оценки) источники;
// - адаптировать настроить и доработать;
// - по критерям не забыть результат;

// Тема работы должна соотносится с обозначенными целями.

// Добавить как вычислительный эксперимент и перевод.
/*
void simpleTCPConnection(void)
{

    std::future<void> localServer(async(std::launch::async, SimpleClient::runLocalServer, 5));
    SimpleClient client(argc, argv);
    client.runExperiment();
    localServer.wait();
    QApplication a(argc, argv);
    QTranslator translator;
    const QStringList uiLanguages = QLocale::system().uiLanguages();
    for (const QString &locale : uiLanguages) {
        const QString baseName = "Toolkit_" + QLocale(locale).name();
        if (translator.load(":/i18n/" + baseName)) {
            a.installTranslator(&translator);
            break;
        }
    }
}
*/

#include "UDPServer.hpp"

// Модули проверить, открыть сокеты, прислать данные, интерфейс(и в ОБС), потоки.

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    //Toolkit toolkit;
    // toolkit.show();
    // return app.exec();
    UDPServer serverA("A", 0xC000, 0xC400);
    // UDPServer serverB("B", 0xC001, 0xC002);
    return 0;
}





